AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Image Upload Service with API Gateway, Lambda, S3, and DynamoDB

Globals:
  Function:
    Runtime: python3.9
    Timeout: 30
    MemorySize: 128
    Environment:
      Variables:
        DeploymentHash: !Ref DeploymentHash
        BUCKET_NAME: !Sub "${AWS::StackName}-storage-bucket-${Environment}"
        TABLE_NAME: !Sub "${AWS::StackName}-metadata-${Environment}"

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, prod, etc.)
  DeployBucket:
    Type: String
    Default: lambda-artifacts
    Description: Bucket name for Lambda artifacts
  DeployKeyPrefix:
    Type: String
    Default: hh001
    Description: Prefix for Lambda artifacts in the bucket
  DeploymentHash:
    Type: String
    Default: 'initial'
    Description: To force a new deployment.

Resources:
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-storage-bucket-${Environment}"

  MetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-metadata-${Environment}"
      AttributeDefinitions:
        - AttributeName: imageId
          AttributeType: S
      KeySchema:
        - AttributeName: imageId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ImageServiceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-lambda-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ImageServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${ImageBucket}"
                  - !Sub "arn:aws:s3:::${ImageBucket}/*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: !GetAtt MetadataTable.Arn

  UploadImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "upload-image-${Environment}"
      Role: !GetAtt ImageServiceLambdaRole.Arn
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Join [ '/', [ !Ref DeployKeyPrefix, 'upload_image.zip' ] ]
      Handler: lambda_function.lambda_handler
      Events:
        Upload:
          Type: Api
          Properties:
            RestApiId: !Ref ImageApi
            Path: /images
            Method: post

  ListImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "list-images-${Environment}"
      Role: !GetAtt ImageServiceLambdaRole.Arn
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Join [ '/', [ !Ref DeployKeyPrefix, 'list_images.zip' ] ]
      Handler: lambda_function.lambda_handler
      Events:
        List:
          Type: Api
          Properties:
            RestApiId: !Ref ImageApi
            Path: /images
            Method: get

  ViewImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "view-image-${Environment}"
      Role: !GetAtt ImageServiceLambdaRole.Arn
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Join [ '/', [ !Ref DeployKeyPrefix, 'view_image.zip' ] ]
      Handler: lambda_function.lambda_handler
      Events:
        View:
          Type: Api
          Properties:
            RestApiId: !Ref ImageApi
            Path: /images/{id}
            Method: get

  DeleteImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "delete-image-${Environment}"
      Role: !GetAtt ImageServiceLambdaRole.Arn
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Join [ '/', [ !Ref DeployKeyPrefix, 'delete_image.zip' ] ]
      Handler: lambda_function.lambda_handler
      Events:
        Delete:
          Type: Api
          Properties:
            RestApiId: !Ref ImageApi
            Path: /images/{id}
            Method: delete

  ImageApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      AlwaysDeploy: True
      BinaryMediaTypes:
        - "image/png"
        - "image/jpeg"
        - "text/html"
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: !Join [ '/', [ 's3:/', !Ref DeployBucket, !Ref DeployKeyPrefix, 'deployment/swagger.yaml' ] ]

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint
    Value: !Sub "https://${ImageApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
  ApiId:
    Description: API Gateway ID
    Value: !Ref ImageApi
